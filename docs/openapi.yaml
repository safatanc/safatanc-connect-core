openapi: 3.0.3
info:
  title: Safatanc Connect Core API
  version: 1.0.0
  description: |
    OpenAPI specification for Safatanc Connect Core. This spec covers authentication, user management, and badge endpoints.
servers:
  - url: https://connect-core.safatanc.com
    description: Production server
  - url: http://localhost:8000
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        full_name:
          type: string
        avatar_url:
          type: string
          format: uri
        global_role:
          type: string
          enum: [USER, ADMIN]
        is_email_verified:
          type: boolean
        created_at:
          type: string
          format: date-time
    Badge:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        image_url:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
    PaginatedResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            data:
              type: array
              items:
                type: object
            total:
              type: integer
            page:
              type: integer
            limit:
              type: integer
            total_pages:
              type: integer
  parameters:
    PageParam:
      in: query
      name: page
      schema:
        type: integer
      description: Page number (default: 1)
    LimitParam:
      in: query
      name: limit
      schema:
        type: integer
      description: Items per page (default: 10)

security:
  - BearerAuth: []

tags:
  - name: Auth
    description: Authentication and authorization endpoints
  - name: Users
    description: User management endpoints
  - name: Badges
    description: Badge management endpoints

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                password:
                  type: string
                  format: password
                full_name:
                  type: string
                avatar_url:
                  type: string
                  format: uri
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /auth/login:
    post:
      tags: [Auth]
      summary: Login with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /auth/me:
    get:
      tags: [Auth]
      summary: Get current user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /auth/verify-email/{token}:
    get:
      tags: [Auth]
      summary: Verify email
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /auth/resend-verification-email:
    post:
      tags: [Auth]
      summary: Resend verification email
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Verification email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /auth/request-password-reset:
    post:
      tags: [Auth]
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset link sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /auth/reset-password:
    post:
      tags: [Auth]
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                new_password:
                  type: string
                  format: password
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /auth/oauth/{provider}:
    get:
      tags: [Auth]
      summary: OAuth login
      parameters:
        - in: path
          name: provider
          required: true
          schema:
            type: string
        - in: query
          name: redirect_uri
          schema:
            type: string
            format: uri
      responses:
        '200':
          description: OAuth URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /auth/oauth/{provider}/callback:
    get:
      tags: [Auth]
      summary: OAuth callback
      parameters:
        - in: path
          name: provider
          required: true
          schema:
            type: string
        - in: query
          name: code
          schema:
            type: string
        - in: query
          name: state
          schema:
            type: string
        - in: query
          name: redirect_uri
          schema:
            type: string
            format: uri
      responses:
        '302':
          description: Redirect to frontend with tokens
  /users:
    get:
      tags: [Users]
      summary: Get all users (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
    post:
      tags: [Users]
      summary: Create user (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                password:
                  type: string
                  format: password
                full_name:
                  type: string
                avatar_url:
                  type: string
                  format: uri
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /users/{id}:
    get:
      tags: [Users]
      summary: Get user by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    put:
      tags: [Users]
      summary: Update user
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                full_name:
                  type: string
                avatar_url:
                  type: string
                  format: uri
                is_active:
                  type: boolean
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      tags: [Users]
      summary: Delete user (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
  /users/me:
    get:
      tags: [Users]
      summary: Get current user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    put:
      tags: [Users]
      summary: Update current user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                full_name:
                  type: string
                avatar_url:
                  type: string
                  format: uri
      responses:
        '200':
          description: Current user updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /users/me/password:
    put:
      tags: [Users]
      summary: Update current user password
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  format: password
                new_password:
                  type: string
                  format: password
      responses:
        '200':
          description: Password updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /users/{id}/password:
    put:
      tags: [Users]
      summary: Update user password
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  format: password
                new_password:
                  type: string
                  format: password
      responses:
        '200':
          description: Password updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /badges:
    get:
      tags: [Badges]
      summary: Get all badges
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: List of badges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
    post:
      tags: [Badges]
      summary: Create badge (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                image_url:
                  type: string
                  format: uri
      responses:
        '201':
          description: Badge created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /badges/{id}:
    get:
      tags: [Badges]
      summary: Get badge by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Badge info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    put:
      tags: [Badges]
      summary: Update badge (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                image_url:
                  type: string
                  format: uri
      responses:
        '200':
          description: Badge updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      tags: [Badges]
      summary: Delete badge (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Badge deleted
  /badges/award:
    post:
      tags: [Badges]
      summary: Award badge to user (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                badge_id:
                  type: string
      responses:
        '201':
          description: Badge awarded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /badges/users/{user_id}/badges/{badge_id}:
    delete:
      tags: [Badges]
      summary: Remove badge from user (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: path
          name: badge_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Badge removed
  /badges/{id}/users:
    get:
      tags: [Badges]
      summary: Get users with badge
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Users with badge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /badges/users/{user_id}:
    get:
      tags: [Badges]
      summary: Get user's badges
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User's badges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /badges/users/{user_id}/badges/{badge_id}/check:
    get:
      tags: [Badges]
      summary: Check if user has badge
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: path
          name: badge_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User has badge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse' 